                                                     NumPy .ipynb
					------------------------------

NumPy (Numerical Python) is a powerful library in Python for numerical computing. It provides a multi-dimensional array object called ndarray, along with various mathematical functions to perform operations on these arrays efficiently. It is widely used for scientific computing, data analysis, machine learning, and deep learning.


where we use numpy?
	When working with large datasets
	When performing mathematical or scientific computations
	When efficiency and speed are required
	When dealing with multi-dimensional arrays

	1D Array [1,2,3,4]                2D Array[[1.2.3.4],                  3DArray [[1,2,3],
				                   [6,7,8,9]]				[4,5,6],
                                                                                        [7,8,9]]

Array Creation
-------------
	arr = np.array([1, 2, 3])
	      np.zeros((2,2))                 floating-point number (float64 by default).(output data show '1.' like)
	      np.ones((2,4))
	      np.empty((2,2)) ---> Creates an uninitialized array
	      np.arange(0,10,1) --> 1D Array
	      np.linespace(1,10,5) --> devide 1 to 10 , 5 pices
	      np.eye(3)  --> it wil give 3*3 array and same I and j will compel place is 1
          np.random.rand(2) ---> random 2*2 array will give
		  np.array([[1,2],[4,5]])
		  np.vstack((arr1, arr2))


Array Manipulation
------------------
	  arr = np.array([[1,2],[4,5]]).reshape(2,3)  --> convert 2*3 array
		np.array([[1,2],[4,5]]).flatten()     ---> convert 1D array
		np.array([[1,2],[4,5]]).transpose()   ----> [1,4],[2,5]
		np.concatenate((arr1,arr2))
		np.split(arr, 3)
		np.hstack((arr1, arr2))
		np.vstack((arr1, arr2))

Mathematical Operations
------------------------

	  arr = np.add([1, 2], [3, 4])          ---> output array([4, 6])
		np.subtract([5, 6], [1, 2])
		np.multiply([1, 2], [3, 4])
		np.divide([6, 8], [2, 4])
		np.dot([1, 2], [3, 4])           ---> output 11
		np.sum([1, 2, 3])                --->        6
		np.mean([1, 2, 3])
		np.std([1, 2, 3])       --->  standard deviation 
		np.min([1, 2, 3])
		np.max([1, 2, 3])
			
 
	      